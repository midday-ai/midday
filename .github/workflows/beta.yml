name: Beta Deployment

env:
  TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  TURBO_TEAM: ${{ secrets.VERCEL_ORG_ID }}
  NODE_OPTIONS: --max-old-space-size=8192

on:
  push:
    branches-ignore:
      - main
    paths:
      - apps/**
      - packages/**
      - turbo.json
      - package.json
      - bun.lock
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy all services'
        required: false
        default: false
        type: boolean

jobs:
  # Setup and cache dependencies (parallel with change detection)
  setup:
    name: 🔧 Setup & Cache
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
      turbo-cache-hit: ${{ steps.cache-turbo.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Cache dependencies (with compression)
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: deps-${{ runner.os }}-${{ hashFiles('**/bun.lock', '**/package.json') }}
          restore-keys: |
            deps-${{ runner.os }}-
          enableCrossOsArchive: true

      - name: 🚀 Cache Turbo (with compression)
        uses: actions/cache@v4
        id: cache-turbo
        with:
          path: |
            .turbo
            **/dist
            **/.next/cache
          key: turbo-beta-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            turbo-beta-${{ runner.os }}-
          enableCrossOsArchive: true

      - name: 📦 Install dependencies (with parallel installs)
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          bun install --frozen-lockfile --concurrent=10

  # Change detection (fast, separate job)
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      has-api-changes: ${{ steps.changes.outputs.api }}
      has-dashboard-changes: ${{ steps.changes.outputs.dashboard }}
      has-website-changes: ${{ steps.changes.outputs.website }}
      has-engine-changes: ${{ steps.changes.outputs.engine }}
      has-email-changes: ${{ steps.changes.outputs.email }}
      has-packages-changes: ${{ steps.changes.outputs.packages }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Advanced change detection
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            api:
              - 'apps/api/**'
              - 'packages/!(email|ui)/**'
            dashboard:
              - 'apps/dashboard/**'
              - 'packages/**'
            website:
              - 'apps/website/**'
              - 'packages/!(email)/**'
            engine:
              - 'apps/engine/**'
              - 'packages/engine-client/**'
            email:
              - 'packages/email/**'
            packages:
              - 'packages/**'
              - 'turbo.json'
              - 'package.json'

  # Parallel quality checks (matrix build for speed)
  quality-checks:
    name: ${{ matrix.check-name }}
    runs-on: ubuntu-latest
    needs: [setup, detect-changes]
    strategy:
      fail-fast: false
      matrix:
        include:
          - check-name: "🔦 Lint"
            check-type: "lint"
          - check-name: "🪐 TypeScript"
            check-type: "typecheck"
          - check-name: "🧪 Tests"
            check-type: "test"
          - check-name: "🔒 Security"
            check-type: "security"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: deps-${{ runner.os }}-${{ hashFiles('**/bun.lock', '**/package.json') }}

      - name: 🚀 Restore Turbo cache
        uses: actions/cache@v4
        with:
          path: |
            .turbo
            **/dist
            **/.next/cache
          key: turbo-beta-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            turbo-beta-${{ runner.os }}-

      - name: 📦 Install dependencies (if cache miss)
        if: needs.setup.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

      - name: 🏗️ Build dependencies (only for typecheck)
        if: matrix.check-type == 'typecheck'
        run: |
          # Build core dependencies that other packages rely on for TypeScript
          bunx turbo build --filter='@midday/engine-client' --filter='@midday/engine' --filter='@midday/utils' --filter='@midday/ui' --filter='@midday/tsconfig'

      - name: 🔦 Run Lint
        if: matrix.check-type == 'lint'
        run: |
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            bunx turbo lint
          else
            bunx turbo lint --filter='[HEAD^1]'
          fi

      - name: 🪐 Run TypeScript Check
        if: matrix.check-type == 'typecheck'
        run: |
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            bunx turbo typecheck
          else
            # Include dependencies in TypeScript check to ensure types are available
            bunx turbo typecheck --filter='[HEAD^1]...'
          fi

      - name: 🧪 Run Tests
        if: matrix.check-type == 'test'
        run: |
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            bunx turbo test
          else
            bunx turbo test --filter='[HEAD^1]'
          fi

      - name: 🔒 Security Checks
        if: matrix.check-type == 'security'
        run: |
          # Security audit
          bun audit --audit-level moderate || true
          echo "Security audit completed"

      - name: 🔍 Secret Scanning
        if: matrix.check-type == 'security'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
        continue-on-error: true

  # Build shared artifacts (parallelized)
  build-shared:
    name: 🏗️ Build Shared
    runs-on: ubuntu-latest
    needs: [setup, detect-changes, quality-checks]
    if: needs.quality-checks.result == 'success' && (needs.detect-changes.outputs.has-engine-changes == 'true' || needs.detect-changes.outputs.has-packages-changes == 'true' || github.event.inputs.force_deploy == 'true')
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: deps-${{ runner.os }}-${{ hashFiles('**/bun.lock', '**/package.json') }}

      - name: 🚀 Restore Turbo cache
        uses: actions/cache@v4
        with:
          path: |
            .turbo
            **/dist
            **/.next/cache
          key: turbo-beta-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            turbo-beta-${{ runner.os }}-

      - name: 🏗️ Build Engine and Dependencies (parallel)
        run: |
          # Build all core packages in parallel with optimal concurrency
          bunx turbo build --filter=@midday/engine --filter=@midday/engine-client --filter=@midday/utils --filter=@midday/ui --concurrency=50%

      - name: 📦 Cache Engine build
        uses: actions/cache@v4
        with:
          path: apps/engine/dist
          key: engine-build-beta-${{ github.sha }}

      - name: 📦 Cache Core Packages
        uses: actions/cache@v4
        with:
          path: |
            packages/engine-client/dist
            packages/utils/dist
            packages/ui/dist
          key: core-packages-beta-${{ github.sha }}

  # Deploy Engine first (dependency for other apps)
  deploy-engine:
    name: 🚀 Deploy Engine (Beta)
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-checks, build-shared]
    if: needs.quality-checks.result == 'success' && (needs.detect-changes.outputs.has-engine-changes == 'true' || github.event.inputs.force_deploy == 'true') && (always() && (needs.build-shared.result == 'success' || needs.build-shared.result == 'skipped' || !needs.build-shared.result))
    environment: beta
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Restore Engine build
        uses: actions/cache@v4
        with:
          path: apps/engine/dist
          key: engine-build-beta-${{ github.sha }}

      - name: 📦 Restore Core Packages
        uses: actions/cache@v4
        with:
          path: |
            packages/engine-client/dist
            packages/utils/dist
            packages/ui/dist
          key: core-packages-beta-${{ github.sha }}

      - name: 📦 Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: deps-${{ runner.os }}-${{ hashFiles('**/bun.lock', '**/package.json') }}

      - name: 🚀 Deploy to Cloudflare (Staging)
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          packageManager: bun
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          workingDirectory: "apps/engine"
          wranglerVersion: "3.93.0"
          command: deploy --minify src/index.ts --env staging

      - name: 📢 Deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

  # Deploy API (waits for Engine only if Engine has changes)
  deploy-api:
    name: 🚀 Deploy API (Beta)
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-checks, deploy-engine]
    if: needs.quality-checks.result == 'success' && (needs.detect-changes.outputs.has-api-changes == 'true' || github.event.inputs.force_deploy == 'true') && (needs.deploy-engine.result == 'success' || needs.deploy-engine.result == 'skipped')
    environment: beta
    concurrency: fly-preview
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: deps-${{ runner.os }}-${{ hashFiles('**/bun.lock', '**/package.json') }}

      - name: 📦 Restore Engine build
        uses: actions/cache@v4
        with:
          path: apps/engine/dist
          key: engine-build-beta-${{ github.sha }}

      - name: 📦 Restore Core Packages
        uses: actions/cache@v4
        with:
          path: |
            packages/engine-client/dist
            packages/utils/dist
            packages/ui/dist
          key: core-packages-beta-${{ github.sha }}

      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: 🚀 Deploy to Fly.io (Preview)
        id: deploy
        run: |
          flyctl deploy --remote-only --dockerfile apps/api/Dockerfile --config apps/api/fly-preview.yml
          echo "deployment-url=https://preview-api.midday.ai" >> $GITHUB_OUTPUT
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: 📢 Deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

  # Deploy Dashboard (waits for API only if API has changes)
  deploy-dashboard:
    name: 🚀 Deploy Dashboard (Beta)
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-checks, deploy-api]
    if: needs.quality-checks.result == 'success' && (needs.detect-changes.outputs.has-dashboard-changes == 'true' || github.event.inputs.force_deploy == 'true') && (needs.deploy-api.result == 'success' || needs.deploy-api.result == 'skipped')
    environment: beta
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DASHBOARD }}
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: deps-${{ runner.os }}-${{ hashFiles('**/bun.lock', '**/package.json') }}

      - name: 📦 Restore Engine build
        uses: actions/cache@v4
        with:
          path: apps/engine/dist
          key: engine-build-beta-${{ github.sha }}

      - name: 📦 Restore Core Packages
        uses: actions/cache@v4
        with:
          path: |
            packages/engine-client/dist
            packages/utils/dist
            packages/ui/dist
          key: core-packages-beta-${{ github.sha }}

      - name: 📤 Pull Vercel Environment (Beta)
        run: bunx vercel pull --yes --environment=beta --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Dashboard
        run: bunx vercel build --target=beta --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🔄 Deploy Background Jobs (Staging)
        env:
          TRIGGER_ACCESS_TOKEN: ${{ secrets.TRIGGER_ACCESS_TOKEN }}
        run: |
          TRIGGER_PROJECT_ID=${{ secrets.TRIGGER_PROJECT_ID }} bunx trigger.dev@3.3.17 deploy --env staging
        working-directory: packages/jobs

      - name: 🚀 Deploy to Vercel (Beta)
        id: deploy
        run: |
          url=$(bunx vercel deploy --prebuilt --target=beta --archive=tgz --token=${{ secrets.VERCEL_TOKEN }})
          bunx vercel alias --scope=${{ secrets.VERCEL_ORG_ID }} --token=${{ secrets.VERCEL_TOKEN }} set $url beta.midday.ai
          echo "deployment-url=https://beta.midday.ai" >> $GITHUB_OUTPUT

      - name: 📢 Deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

  # Deploy Website (parallel with dashboard)
  deploy-website:
    name: 🚀 Deploy Website (Beta)
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-checks]
    if: needs.quality-checks.result == 'success' && (needs.detect-changes.outputs.has-website-changes == 'true' || github.event.inputs.force_deploy == 'true')
    environment: beta
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_WEBSITE }}
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: deps-${{ runner.os }}-${{ hashFiles('**/bun.lock', '**/package.json') }}

      - name: 📤 Pull Vercel Environment (Preview)
        run: bunx vercel env pull .env --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 📤 Pull Vercel Project Config
        run: bunx vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Website
        run: bunx vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy to Vercel (Preview)
        id: deploy
        run: |
          url=$(bunx vercel deploy --prebuilt --archive=tgz --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment-url=$url" >> $GITHUB_OUTPUT

      - name: 📢 Deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

  # Deploy Email (parallel with other apps)
  deploy-email:
    name: 🚀 Deploy Email (Beta)
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-checks]
    if: needs.quality-checks.result == 'success' && (needs.detect-changes.outputs.has-email-changes == 'true' || github.event.inputs.force_deploy == 'true')
    environment: beta
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_EMAIL }}
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: deps-${{ runner.os }}-${{ hashFiles('**/bun.lock', '**/package.json') }}

      - name: 📤 Pull Vercel Environment (Preview)
        run: bunx vercel env pull .env --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 📤 Pull Vercel Project Config
        run: bunx vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Email
        run: bunx vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy to Vercel (Preview)
        id: deploy
        run: |
          url=$(bunx vercel deploy --prebuilt --archive=tgz --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment-url=$url" >> $GITHUB_OUTPUT

      - name: 📢 Deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

  # Post-deployment validation
  post-deployment:
    name: 📊 Post-Deployment
    runs-on: ubuntu-latest
    needs: [deploy-engine, deploy-api, deploy-dashboard]
    if: always()
    steps:
      - name: 🔍 Integration tests
        run: |
          echo "Running integration tests..."
          # Add integration test commands here
          
      - name: 📊 Performance monitoring
        run: |
          echo "Setting up performance monitoring..."
          # Add performance monitoring setup

      - name: 📈 Deployment metrics
        run: |
           echo "## Beta Deployment Summary" >> $GITHUB_STEP_SUMMARY
           echo "| Service | Status | URL | Changes |" >> $GITHUB_STEP_SUMMARY
           echo "|---------|--------|-----|---------|" >> $GITHUB_STEP_SUMMARY
           echo "| Engine | ${{ needs.deploy-engine.result || 'Skipped' }} | ${{ needs.deploy-engine.outputs.deployment-url || 'N/A' }} | ${{ needs.detect-changes.outputs.has-engine-changes }} |" >> $GITHUB_STEP_SUMMARY
           echo "| API | ${{ needs.deploy-api.result || 'Skipped' }} | ${{ needs.deploy-api.outputs.deployment-url || 'N/A' }} | ${{ needs.detect-changes.outputs.has-api-changes }} |" >> $GITHUB_STEP_SUMMARY
           echo "| Dashboard | ${{ needs.deploy-dashboard.result || 'Skipped' }} | ${{ needs.deploy-dashboard.outputs.deployment-url || 'N/A' }} | ${{ needs.detect-changes.outputs.has-dashboard-changes }} |" >> $GITHUB_STEP_SUMMARY
           echo "| Website | ${{ needs.deploy-website.result || 'Skipped' }} | ${{ needs.deploy-website.outputs.deployment-url || 'N/A' }} | ${{ needs.detect-changes.outputs.has-website-changes }} |" >> $GITHUB_STEP_SUMMARY
           echo "| Email | ${{ needs.deploy-email.result || 'Skipped' }} | ${{ needs.deploy-email.outputs.deployment-url || 'N/A' }} | ${{ needs.detect-changes.outputs.has-email-changes }} |" >> $GITHUB_STEP_SUMMARY

      - name: 📢 Final deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: |
            🚀 Beta deployment completed!
            
            **Deployed Services:**
            ${{ needs.deploy-engine.result == 'success' && '✅ Engine' || '❌ Engine' }}
            ${{ needs.deploy-api.result == 'success' && '✅ API' || '❌ API' }}
            ${{ needs.deploy-dashboard.result == 'success' && '✅ Dashboard' || '❌ Dashboard' }}
            ${{ needs.deploy-website.result == 'success' && '✅ Website' || '❌ Website' }}
            ${{ needs.deploy-email.result == 'success' && '✅ Email' || '❌ Email' }}
        continue-on-error: true 